/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/food/{fdcId}": {
    /** Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified. */
    get: operations["getFood"];
  };
  "/v1/foods": {
    /** Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches. */
    get: operations["getFoods"];
    /** Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches. */
    post: operations["postFoods"];
  };
  "/v1/foods/list": {
    /** Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set. */
    get: operations["getFoodsList"];
    /** Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set. */
    post: operations["postFoodsList"];
  };
  "/v1/foods/search": {
    /** Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting. */
    get: operations["getFoodsSearch"];
    /** Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting. */
    post: operations["postFoodsSearch"];
  };
  "/v1/json-spec": {
    /** The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation) */
    get: operations["getJsonSpec"];
  };
  "/v1/yaml-spec": {
    /** The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language) */
    get: operations["getYamlSpec"];
  };
}

export interface components {
  schemas: {
    AbridgedFoodItem: {
      /** @example Branded */
      dataType: string;
      /** @example NUT 'N BERRY MIX */
      description: string;
      /** @example 534358 */
      fdcId: number;
      foodNutrients?: components["schemas"]["AbridgedFoodNutrient"][];
      /** @example 4/1/2019 */
      publicationDate?: string;
      /**
       * @description only applies to Branded Foods
       * @example Kar Nut Products Company
       */
      brandOwner?: string;
      /**
       * @description only applies to Branded Foods
       * @example 077034085228
       */
      gtinUpc?: string;
      /**
       * @description only applies to Foundation and SRLegacy Foods
       * @example 7954
       */
      ndbNumber?: number;
      /**
       * @description only applies to Survey Foods
       * @example 27415110
       */
      foodCode?: string;
    };
    BrandedFoodItem: {
      /** @example 534358 */
      fdcId: number;
      /** @example 8/18/2018 */
      availableDate?: string;
      /** @example Kar Nut Products Company */
      brandOwner?: string;
      /** @example LI */
      dataSource?: string;
      /** @example Branded */
      dataType: string;
      /** @example NUT 'N BERRY MIX */
      description: string;
      /** @example Branded */
      foodClass?: string;
      /** @example 077034085228 */
      gtinUpc?: string;
      /** @example 1 ONZ */
      householdServingFullText?: string;
      /** @example PEANUTS (PEANUTS, PEANUT AND/OR SUNFLOWER OIL). RAISINS. DRIED CRANBERRIES (CRANBERRIES, SUGAR, SUNFLOWER OIL). SUNFLOWER KERNELS AND ALMONDS (SUNFLOWER KERNELS AND ALMONDS, PEANUT AND/OR SUNFLOWER OIL). */
      ingredients?: string;
      /** @example 8/18/2018 */
      modifiedDate?: string;
      /** @example 4/1/2019 */
      publicationDate?: string;
      /**
       * Format: float32
       * @example 28
       */
      servingSize?: number;
      /** @example g */
      servingSizeUnit?: string;
      /** @example UNPREPARED */
      preparationStateCode?: string;
      /** @example Popcorn, Peanuts, Seeds & Related Snacks */
      brandedFoodCategory?: string;
      /**
       * @example [
       *   "CHILD_NUTRITION_FOOD_PROGRAMS",
       *   "GROCERY"
       * ]
       */
      tradeChannel?: string[];
      /** @example 50161800 */
      gpcClassCode?: number;
      foodNutrients?: components["schemas"]["FoodNutrient"][];
      foodUpdateLog?: components["schemas"]["FoodUpdateLog"][];
      labelNutrients?: components["schemas"]["BrandedFoodItem_labelNutrients"];
    };
    FoundationFoodItem: {
      /** @example 747448 */
      fdcId: number;
      /** @example Foundation */
      dataType: string;
      /** @example Strawberries, raw */
      description: string;
      /** @example FinalFood */
      foodClass?: string;
      /** @example Source number reflects the actual number of samples analyzed for a nutrient. Repeat nutrient analyses may have been done on the same sample with the values shown. */
      footNote?: string;
      /** @example false */
      isHistoricalReference?: boolean;
      /** @example 9316 */
      ndbNumber?: number;
      /** @example 12/16/2019 */
      publicationDate?: string;
      /** @example Fragaria X ananassa */
      scientificName?: string;
      foodCategory?: components["schemas"]["FoodCategory"];
      foodComponents?: components["schemas"]["FoodComponent"][];
      foodNutrients?: components["schemas"]["FoodNutrient"][];
      foodPortions?: components["schemas"]["FoodPortion"][];
      inputFoods?: components["schemas"]["InputFoodFoundation"][];
      nutrientConversionFactors?: components["schemas"]["NutrientConversionFactors"][];
    };
    SRLegacyFoodItem: {
      /** @example 170379 */
      fdcId: number;
      /** @example SR Legacy */
      dataType: string;
      /** @example Broccoli, raw */
      description: string;
      /** @example FinalFood */
      foodClass?: string;
      /** @example true */
      isHistoricalReference?: boolean;
      /** @example 11090 */
      ndbNumber?: number;
      /** @example 4/1/2019 */
      publicationDate?: string;
      /** @example Brassica oleracea var. italica */
      scientificName?: string;
      foodCategory?: components["schemas"]["FoodCategory"];
      foodNutrients?: components["schemas"]["FoodNutrient"][];
      nutrientConversionFactors?: components["schemas"]["NutrientConversionFactors"][];
    };
    SurveyFoodItem: {
      /** @example 337985 */
      fdcId: number;
      /** @example Survey (FNDDS) */
      datatype?: string;
      /** @example Beef curry */
      description: string;
      /** @example 12/31/2014 */
      endDate?: string;
      /** @example Survey */
      foodClass?: string;
      /** @example 27116100 */
      foodCode?: string;
      /** @example 4/1/2019 */
      publicationDate?: string;
      /** @example 1/1/2013 */
      startDate?: string;
      foodAttributes?: components["schemas"]["FoodAttribute"][];
      foodPortions?: components["schemas"]["FoodPortion"][];
      inputFoods?: components["schemas"]["InputFoodSurvey"][];
      wweiaFoodCategory?: components["schemas"]["WweiaFoodCategory"];
    } & {
      dataType: unknown;
    };
    SampleFoodItem: {
      /** @example 45551 */
      fdcId: number;
      /** @example Sample */
      datatype?: string;
      /** @example Beef, Tenderloin Roast, select, roasted, comp5, lean (34BLTR) */
      description: string;
      /** @example Composite */
      foodClass?: string;
      /** @example 4/1/2019 */
      publicationDate?: string;
      foodAttributes?: components["schemas"]["FoodCategory"][];
    } & {
      dataType: unknown;
    };
    AbridgedFoodNutrient: {
      /**
       * Format: uint
       * @example 303
       */
      number?: number;
      /** @example Iron, Fe */
      name?: string;
      /**
       * Format: float
       * @example 0.53
       */
      amount?: number;
      /** @example mg */
      unitName?: string;
      /** @example LCCD */
      derivationCode?: string;
      /** @example Calculated from a daily value percentage per serving size measure */
      derivationDescription?: string;
    } & {
      id: unknown;
      nutrientNumber: unknown;
      unit: unknown;
    };
    FoodNutrient: {
      /**
       * Format: uint
       * @example 167514
       */
      id: number;
      /**
       * Format: float
       * @example 0
       */
      amount?: number;
      /**
       * Format: int32
       * @example 49
       */
      dataPoints?: number;
      /**
       * Format: float
       * @example 73.73
       */
      min?: number;
      /**
       * Format: float
       * @example 91.8
       */
      max?: number;
      /**
       * Format: float
       * @example 90.3
       */
      median?: number;
      /** @example FoodNutrient */
      type?: string;
      nutrient?: components["schemas"]["Nutrient"];
      foodNutrientDerivation?: components["schemas"]["FoodNutrientDerivation"];
      nutrientAnalysisDetails?: components["schemas"]["NutrientAnalysisDetails"];
    } & {
      nutrientNumber: unknown;
      unit: unknown;
    };
    /** @description a food nutrient */
    Nutrient: {
      /**
       * Format: uint
       * @example 1005
       */
      id?: number;
      /** @example 305 */
      number?: string;
      /** @example Carbohydrate, by difference */
      name?: string;
      /**
       * Format: uint
       * @example 1110
       */
      rank?: number;
      /** @example g */
      unitName?: string;
    };
    FoodNutrientDerivation: {
      /**
       * Format: int32
       * @example 75
       */
      id?: number;
      /** @example LCCD */
      code?: string;
      /** @example Calculated from a daily value percentage per serving size measure */
      description?: string;
      foodNutrientSource?: components["schemas"]["FoodNutrientSource"];
    };
    FoodNutrientSource: {
      /**
       * Format: int32
       * @example 9
       */
      id?: number;
      /** @example 12 */
      code?: string;
      /** @example Manufacturer's analytical; partial documentation */
      description?: string;
    };
    NutrientAnalysisDetails: {
      /** @example 343866 */
      subSampleId?: number;
      /**
       * Format: float
       * @example 0
       */
      amount?: number;
      /** @example 1005 */
      nutrientId?: number;
      /** @example 10.2135/cropsci2017.04.0244 */
      labMethodDescription?: string;
      labMethodOriginalDescription?: string;
      /**
       * Format: url
       * @example https://doi.org/10.2135/cropsci2017.04.0244
       */
      labMethodLink?: string;
      /** @example DOI for Beans */
      labMethodTechnique?: string;
      nutrientAcquisitionDetails?: components["schemas"]["NutrientAcquisitionDetails"][];
    };
    NutrientAcquisitionDetails: {
      /** @example 321632 */
      sampleUnitId?: number;
      /** @example 12/2/2005 */
      purchaseDate?: string;
      /** @example TRUSSVILLE */
      storeCity?: string;
      /** @example AL */
      storeState?: string;
    };
    NutrientConversionFactors: {
      /** @example .ProteinConversionFactor */
      type?: string;
      /**
       * Format: float
       * @example 6.25
       */
      value?: number;
    };
    FoodUpdateLog: {
      /** @example 534358 */
      fdcId?: number;
      /** @example 8/18/2018 */
      availableDate?: string;
      /** @example Kar Nut Products Company */
      brandOwner?: string;
      /** @example LI */
      dataSource?: string;
      /** @example Branded */
      dataType?: string;
      /** @example NUT 'N BERRY MIX */
      description?: string;
      /** @example Branded */
      foodClass?: string;
      /** @example 077034085228 */
      gtinUpc?: string;
      /** @example 1 ONZ */
      householdServingFullText?: string;
      /** @example PEANUTS (PEANUTS, PEANUT AND/OR SUNFLOWER OIL). RAISINS. DRIED CRANBERRIES (CRANBERRIES, SUGAR, SUNFLOWER OIL). SUNFLOWER KERNELS AND ALMONDS (SUNFLOWER KERNELS AND ALMONDS, PEANUT AND/OR SUNFLOWER OIL). */
      ingredients?: string;
      /** @example 8/18/2018 */
      modifiedDate?: string;
      /** @example 4/1/2019 */
      publicationDate?: string;
      /**
       * Format: float32
       * @example 28
       */
      servingSize?: number;
      /** @example g */
      servingSizeUnit?: string;
      /** @example Popcorn, Peanuts, Seeds & Related Snacks */
      brandedFoodCategory?: string;
      /** @example Nutrient Added, Nutrient Updated */
      changes?: string;
      foodAttributes?: components["schemas"]["FoodAttribute"][];
    };
    FoodAttribute: {
      /** @example 25117 */
      id?: number;
      /** @example 1 */
      sequenceNumber?: number;
      /** @example Moisture change: -5.0% */
      value?: string;
      FoodAttributeType?: components["schemas"]["FoodAttribute_FoodAttributeType"];
    };
    FoodCategory: {
      /**
       * Format: int32
       * @example 11
       */
      id?: number;
      /** @example 1100 */
      code?: string;
      /** @example Vegetables and Vegetable Products */
      description?: string;
    };
    FoodComponent: {
      /**
       * Format: int32
       * @example 59929
       */
      id?: number;
      /** @example External fat */
      name?: string;
      /** @example 24 */
      dataPoints?: number;
      /** @example 2.1 */
      gramWeight?: number;
      /** @example true */
      isRefuse?: boolean;
      /** @example 2011 */
      minYearAcquired?: number;
      /** @example 0.5 */
      percentWeight?: number;
    };
    FoodPortion: {
      /**
       * Format: int32
       * @example 135806
       */
      id?: number;
      /**
       * Format: float
       * @example 1
       */
      amount?: number;
      /**
       * Format: int32
       * @example 9
       */
      dataPoints?: number;
      /**
       * Format: float
       * @example 91
       */
      gramWeight?: number;
      /** @example 2011 */
      minYearAcquired?: number;
      /** @example 10205 */
      modifier?: string;
      /** @example 1 cup */
      portionDescription?: string;
      /** @example 1 */
      sequenceNumber?: number;
      measureUnit?: components["schemas"]["MeasureUnit"];
    };
    /** @description applies to Foundation foods. Not all inputFoods will have all fields. */
    InputFoodFoundation: {
      /** @example 45551 */
      id?: number;
      /** @example Beef, Tenderloin Roast, select, roasted, comp5, lean (34BLTR) */
      foodDescription?: string;
      inputFood?: components["schemas"]["SampleFoodItem"];
    };
    /** @description applies to Survey (FNDDS). Not all inputFoods will have all fields. */
    InputFoodSurvey: {
      /** @example 18146 */
      id?: number;
      /**
       * Format: float
       * @example 1.5
       */
      amount?: number;
      /** @example Spices, curry powder */
      foodDescription?: string;
      /** @example 2015 */
      ingredientCode?: number;
      /** @example Spices, curry powder */
      ingredientDescription?: string;
      /**
       * Format: float
       * @example 9.45
       */
      ingredientWeight?: number;
      /** @example 21000 */
      portionCode?: string;
      /** @example 1 tablespoon */
      portionDescription?: string;
      /** @example 6 */
      sequenceNumber?: number;
      /** @example 0 */
      surveyFlag?: number;
      /** @example TB */
      unit?: string;
      inputFood?: components["schemas"]["SurveyFoodItem"];
      retentionFactor?: components["schemas"]["RetentionFactor"];
    };
    MeasureUnit: {
      /**
       * Format: int32
       * @example 999
       */
      id?: number;
      /** @example undetermined */
      abbreviation?: string;
      /** @example undetermined */
      name?: string;
    };
    RetentionFactor: {
      /** @example 235 */
      id?: number;
      /** @example 3460 */
      code?: number;
      /** @example VEG, ROOTS, ETC, SAUTEED */
      description?: string;
    };
    WweiaFoodCategory: {
      /** @example 3002 */
      wweiaFoodCategoryCode?: number;
      /** @example Meat mixed dishes */
      wweiaFoodCategoryDescription?: string;
    };
    /** @description JSON for request body of 'foods' POST request. Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches. */
    FoodsCriteria: {
      /**
       * @description List of multiple FDC ID's
       * @example [
       *   534358,
       *   373052,
       *   616350
       * ]
       */
      fdcIds?: number[];
      /**
       * @description Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
       * @enum {string}
       */
      format?: "abridged" | "full";
      /**
       * @description Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
       * @example [
       *   203,
       *   204,
       *   205
       * ]
       */
      nutrients?: number[];
    };
    /** @description JSON for request body of 'list' POST request */
    FoodListCriteria: {
      /**
       * @description Optional. Filter on a specific data type; specify one or more values in an array.
       * @example [
       *   "Foundation",
       *   "SR Legacy"
       * ]
       */
      dataType?: ("Branded" | "Foundation" | "Survey (FNDDS)" | "SR Legacy")[];
      /**
       * @description Optional. Maximum number of results to return for the current page. Default is 50.
       * @example 25
       */
      pageSize?: number;
      /**
       * @description Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
       * @example 2
       */
      pageNumber?: number;
      /**
       * @description Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
       * @enum {string}
       */
      sortBy?:
        | "dataType.keyword"
        | "lowercaseDescription.keyword"
        | "fdcId"
        | "publishedDate";
      /**
       * @description Optional. The sort direction for the results. Only applicable if sortBy is specified.
       * @enum {string}
       */
      sortOrder?: "asc" | "desc";
    };
    /** @description A copy of the criteria that were used in the search. */
    FoodSearchCriteria: {
      /**
       * @description Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)
       * @example Cheddar cheese
       */
      query?: string;
      /**
       * @description Optional. Filter on a specific data type; specify one or more values in an array.
       * @example [
       *   "Foundation",
       *   "SR Legacy"
       * ]
       */
      dataType?: ("Branded" | "Foundation" | "Survey (FNDDS)" | "SR Legacy")[];
      /**
       * @description Optional. Maximum number of results to return for the current page. Default is 50.
       * @example 25
       */
      pageSize?: number;
      /**
       * @description Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
       * @example 2
       */
      pageNumber?: number;
      /**
       * @description Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.
       * @enum {string}
       */
      sortBy?:
        | "dataType.keyword"
        | "lowercaseDescription.keyword"
        | "fdcId"
        | "publishedDate";
      /**
       * @description Optional. The sort direction for the results. Only applicable if sortBy is specified.
       * @enum {string}
       */
      sortOrder?: "asc" | "desc";
      /**
       * @description Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods.
       * @example Kar Nut Products Company
       */
      brandOwner?: string;
      /**
       * @description Optional. Filter foods containing any of the specified trade channels.
       * @example [
       *   "“CHILD_NUTRITION_FOOD_PROGRAMS”",
       *   "“GROCERY”"
       * ]
       */
      tradeChannel?: (
        | "CHILD_NUTRITION_FOOD_PROGRAMS"
        | "DRUG"
        | "FOOD_SERVICE"
        | "GROCERY"
        | "MASS_MERCHANDISING"
        | "MILITARY"
        | "ONLINE"
        | "VENDING"
      )[];
      /**
       * @description Filter foods published on or after this date. Format: YYYY-MM-DD
       * @example 2021-01-01
       */
      startDate?: string;
      /**
       * @description Filter foods published on or before this date. Format: YYYY-MM-DD
       * @example 2021-12-30
       */
      endDate?: string;
    };
    SearchResult: {
      foodSearchCriteria?: components["schemas"]["FoodSearchCriteria"];
      /**
       * @description The total number of foods found matching the search criteria.
       * @example 1034
       */
      totalHits?: number;
      /** @description The current page of results being returned. */
      currentPage?: number;
      /** @description The total number of pages found matching the search criteria. */
      totalPages?: number;
      /** @description The list of foods found matching the search criteria. See Food Fields below. */
      foods?: components["schemas"]["SearchResultFood"][];
    };
    SearchResultFood: {
      /**
       * @description Unique ID of the food.
       * @example 45001529
       */
      fdcId: number;
      /**
       * @description The type of the food data.
       * @example Branded
       */
      dataType?: string;
      /**
       * @description The description of the food.
       * @example BROCCOLI
       */
      description: string;
      /** @description Any A unique ID identifying the food within FNDDS. */
      foodCode?: string;
      foodNutrients?: components["schemas"]["AbridgedFoodNutrient"][];
      /**
       * @description Date the item was published to FDC.
       * @example 4/1/2019
       */
      publicationDate?: string;
      /** @description The scientific name of the food. */
      scientificName?: string;
      /**
       * @description Brand owner for the food. Only applies to Branded Foods.
       * @example Supervalu, Inc.
       */
      brandOwner?: string;
      /**
       * @description GTIN or UPC code identifying the food. Only applies to Branded Foods.
       * @example 041303020937
       */
      gtinUpc?: string;
      /** @description The list of ingredients (as it appears on the product label). Only applies to Branded Foods. */
      ingredients?: string;
      /** @description Unique number assigned for foundation foods. Only applies to Foundation and SRLegacy Foods. */
      ndbNumber?: number;
      /**
       * @description Any additional descriptions of the food.
       * @example Coon; sharp cheese; Tillamook; Hoop; Pioneer; New York; Wisconsin; Longhorn
       */
      additionalDescriptions?: string;
      /** @description allHighlightFields */
      allHighlightFields?: string;
      /**
       * Format: float
       * @description Relative score indicating how well the food matches the search criteria.
       */
      score?: number;
    };
    inline_response_200:
      | components["schemas"]["AbridgedFoodItem"]
      | components["schemas"]["BrandedFoodItem"]
      | components["schemas"]["FoundationFoodItem"]
      | components["schemas"]["SRLegacyFoodItem"]
      | components["schemas"]["SurveyFoodItem"];
    BrandedFoodItem_labelNutrients_fat: {
      /**
       * Format: float
       * @example 8.9992
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_saturatedFat: {
      /**
       * Format: float
       * @example 0.9996
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_transFat: {
      /**
       * Format: float
       * @example 0
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_carbohydrates: {
      /**
       * Format: float
       * @example 12.0008
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_fiber: {
      /**
       * Format: float
       * @example 1.988
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_sugars: {
      /**
       * Format: float
       * @example 7.9996
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_protein: {
      /**
       * Format: float
       * @example 4.0012
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_calcium: {
      /**
       * Format: float
       * @example 19.88
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_iron: {
      /**
       * Format: float
       * @example 0.7196
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_potassium: {
      /**
       * Format: float
       * @example 159.88
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients_calories: {
      /**
       * Format: float
       * @example 140
       */
      value?: number;
    };
    BrandedFoodItem_labelNutrients: {
      fat?: components["schemas"]["BrandedFoodItem_labelNutrients_fat"];
      saturatedFat?: components["schemas"]["BrandedFoodItem_labelNutrients_saturatedFat"];
      transFat?: components["schemas"]["BrandedFoodItem_labelNutrients_transFat"];
      cholesterol?: components["schemas"]["BrandedFoodItem_labelNutrients_transFat"];
      sodium?: components["schemas"]["BrandedFoodItem_labelNutrients_transFat"];
      carbohydrates?: components["schemas"]["BrandedFoodItem_labelNutrients_carbohydrates"];
      fiber?: components["schemas"]["BrandedFoodItem_labelNutrients_fiber"];
      sugars?: components["schemas"]["BrandedFoodItem_labelNutrients_sugars"];
      protein?: components["schemas"]["BrandedFoodItem_labelNutrients_protein"];
      calcium?: components["schemas"]["BrandedFoodItem_labelNutrients_calcium"];
      iron?: components["schemas"]["BrandedFoodItem_labelNutrients_iron"];
      potassium?: components["schemas"]["BrandedFoodItem_labelNutrients_potassium"];
      calories?: components["schemas"]["BrandedFoodItem_labelNutrients_calories"];
    };
    FoodAttribute_FoodAttributeType: {
      /** @example 1002 */
      id?: number;
      /** @example Adjustments */
      name?: string;
      /** @example Adjustments made to foods, including moisture and fat changes. */
      description?: string;
    };
  };
}

export interface operations {
  /** Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified. */
  getFood: {
    parameters: {
      path: {
        /** FDC id of the food to retrieve */
        fdcId: string;
      };
      query: {
        /** Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default). */
        format?: "abridged" | "full";
        /** Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. */
        nutrients?: number[];
      };
    };
    responses: {
      /** One food result. */
      200: {
        content: {
          "application/json": components["schemas"]["inline_response_200"];
        };
      };
      /** bad input parameter */
      400: unknown;
      /** no results found */
      404: unknown;
    };
  };
  /** Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches. */
  getFoods: {
    parameters: {
      query: {
        /** List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052). */
        fdcIds: string[];
        /** Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default). */
        format?: "abridged" | "full";
        /** Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. */
        nutrients?: number[];
      };
    };
    responses: {
      /** List of Food details matching specified FDC ID's. Invalid FDC ID's or ones that are not found are omitted. */
      200: {
        content: {
          "application/json": (Partial<
            components["schemas"]["AbridgedFoodItem"]
          > &
            Partial<components["schemas"]["BrandedFoodItem"]> &
            Partial<components["schemas"]["FoundationFoodItem"]> &
            Partial<components["schemas"]["SRLegacyFoodItem"]> &
            Partial<components["schemas"]["SurveyFoodItem"]>)[];
        };
      };
      /** bad input parameter */
      400: unknown;
    };
  };
  /** Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches. */
  postFoods: {
    responses: {
      /** List of Food details matching specified FDC ID's. Invalid FDC ID's or ones that are not found are omitted. */
      200: {
        content: {
          "application/json": (Partial<
            components["schemas"]["AbridgedFoodItem"]
          > &
            Partial<components["schemas"]["BrandedFoodItem"]> &
            Partial<components["schemas"]["FoundationFoodItem"]> &
            Partial<components["schemas"]["SRLegacyFoodItem"]> &
            Partial<components["schemas"]["SurveyFoodItem"]>)[];
        };
      };
      /** bad input parameter */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FoodsCriteria"];
      };
    };
  };
  /** Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set. */
  getFoodsList: {
    parameters: {
      query: {
        /** Optional. Filter on a specific data type; specify one or more values in an array. */
        dataType?: (
          | "Branded"
          | "Foundation"
          | "Survey (FNDDS)"
          | "SR Legacy"
        )[];
        /** Optional. Maximum number of results to return for the current page. Default is 50. */
        pageSize?: number;
        /** Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) */
        pageNumber?: number;
        /** Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. */
        sortBy?:
          | "dataType.keyword"
          | "lowercaseDescription.keyword"
          | "fdcId"
          | "publishedDate";
        /** Optional. The sort direction for the results. Only applicable if sortBy is specified. */
        sortOrder?: "asc" | "desc";
      };
    };
    responses: {
      /** List of foods for the requested page */
      200: {
        content: {
          "application/json": components["schemas"]["AbridgedFoodItem"][];
        };
      };
      /** bad input parameter */
      400: unknown;
    };
  };
  /** Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set. */
  postFoodsList: {
    responses: {
      /** List of foods for the requested page */
      200: {
        content: {
          "application/json": components["schemas"]["AbridgedFoodItem"][];
        };
      };
      /** bad input parameter */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FoodListCriteria"];
      };
    };
  };
  /** Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting. */
  getFoodsSearch: {
    parameters: {
      query: {
        /** One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) */
        query: string;
        /** Optional. Filter on a specific data type; specify one or more values in an array. */
        dataType?: (
          | "Branded"
          | "Foundation"
          | "Survey (FNDDS)"
          | "SR Legacy"
        )[];
        /** Optional. Maximum number of results to return for the current page. Default is 50. */
        pageSize?: number;
        /** Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) */
        pageNumber?: number;
        /** Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. */
        sortBy?:
          | "dataType.keyword"
          | "lowercaseDescription.keyword"
          | "fdcId"
          | "publishedDate";
        /** Optional. The sort direction for the results. Only applicable if sortBy is specified. */
        sortOrder?: "asc" | "desc";
        /** Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods */
        brandOwner?: string;
      };
    };
    responses: {
      /** List of foods that matched search terms */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResult"];
        };
      };
      /** bad input parameter */
      400: unknown;
    };
  };
  /** Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting. */
  postFoodsSearch: {
    responses: {
      /** List of foods that matched search terms */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResult"];
        };
      };
      /** bad input parameter */
      400: unknown;
    };
    /** The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FoodSearchCriteria"];
      };
    };
  };
  /** The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation) */
  getJsonSpec: {
    responses: {
      /** JSON rendering of OpenAPI 3.0 specification */
      default: unknown;
    };
  };
  /** The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language) */
  getYamlSpec: {
    responses: {
      /** YAML rendering of OpenAPI 3.0 specification */
      default: unknown;
    };
  };
}

export interface external {}
